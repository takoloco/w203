# Define bins for political standing histograms
bins_standing <- seq(from = min(presapp_job_x_coast), to = max(presapp_job_x_coast), by = 1)
# Plot histogram
hist(presapp_job_x_coast, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 20: q5_3
presapp_job_x_flyover <- compilePoliticalWeights(
S$presapp_job_x[grep("central|Mountain", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_flyover <- mean(presapp_job_x_flyover)
# Plot histogram
hist(presapp_job_x_flyover, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 21: q5_4
(rs <- wilcox.test(presapp_job_x_flyover, presapp_job_x_coast, alternative = "greater"))
# Chunk 22: q5_5
n = length(presapp_job_x_flyover) + length(presapp_job_x_coast)
(r = calcEffectSize(rs$p.value, n))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
S = read.csv("ANES_2012_sel.csv")
# Chunk 3: q1_1
summary(S$libcpre_self)
n = length(S$libcpre_self)
# Chunk 4: q1_2
# Function for generating political weights nulling invalid answers
compilePoliticalWeights <- function(v, offset, skip_null = TRUE) {
if(skip_null) {
v = v[grepl("^(\\d{1})", v)]
}
as.numeric(v)-offset
}
libcpre_ranks <- compilePoliticalWeights(S$libcpre_self, 3)
mu_libcpre <- mean(libcpre_ranks)
# Define bins for political standing histograms
bins_standing <- seq(from = min(libcpre_ranks), to = max(libcpre_ranks), by = 1)
# Plot histogram
hist(libcpre_ranks, main = "Pre-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 5: q1_3
summary(factor(substr(S$libcpo_self, 1, 35)))
# Chunk 6: q1_4
libcpo_ranks <- compilePoliticalWeights(S$libcpo_self, 5)
mu_libcpo = mean(libcpo_ranks)
hist(libcpo_ranks, main = "Post-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 7: q1_5
(rs <- wilcox.test(libcpre_ranks, libcpo_ranks, alternative = "two.sided"))
# Chunk 8: q1_6
calcEffectSize <- function(stat, n) {
r = qnorm(stat)/sqrt(n)
}
n = length(libcpre_ranks)+length(libcpo_ranks)
(r = calcEffectSize(rs$p.value, n))
# Chunk 9: q2_1
# Define bins for voter age histograms
bins_ages <- seq(from = 20, to = 100, by = 10)
bins_ages <- c(18, bins_ages)
# Extract Republican voters
rep_ages <- S$dem_age_r_x[grep("republican", S$pid_x, ignore.case = T)]
rep_ages <- rep_ages[is.numeric(rep_ages) & rep_ages >= 18]
rep_ages_n = length(rep_ages)
rep_age_mean = mean(rep_ages)
hist(rep_ages, main = "Republican Voter Age", xlab = "Age", breaks = bins_ages)
# Extract Democratic voters
dem_ages <- S$dem_age_r_x[grep("democrat", S$pid_x, ignore.case = T)]
dem_ages <- dem_ages[is.numeric(dem_ages) & dem_ages >= 18]
dem_ages_n = length(dem_ages)
dem_age_mean = mean(dem_ages)
hist(dem_ages, main = "Democratic Voter Age", xlab = "Age", breaks = bins_ages)
# Chunk 10: q2_2
rs <- t.test(rep_ages, dem_ages, alternative = "greater")
p <- rs$p.value
# Chunk 11: q2_3
calcPooledSd <- function(v1, v2) {
((length(v1)-1)*sd(v1)^2 + (length(v2)-1)*sd(v2)^2)/(length(v1) + length(v2) - 2)
}
calcCohensD <- function(v1, v2) {
(mean(v1) - mean(v2))/calcPooledSd(v1, v2)
}
(d = calcCohensD(rep_ages, dem_ages))
# Chunk 12: q3_1
rs <- t.test(rep_ages, alternative = "greater", mu = 51)
p <- rs$p.value
# Chunk 13: q3_2
computeEffectSizeCorrelationR <- function(t, df) {
t/sqrt(t^2+df)
}
r = computeEffectSizeCorrelationR(rs$statistic, rep_ages_n-1)
# Chunk 14: q4_1
calcDiff <- function(v1, v2, skip_null = TRUE) {
if(length(v1) != length(v2)) {
FALSE
}
v = c()
for(i in 1:length(v1)) {
if((v1[i] < 1 || v2[i] < 1) && skip_null) {
next
}
v = c(v, v1[i]-v2[i])
}
v
}
# Pre-2012 election Republican voters
libcpre_rep_ranks <- compilePoliticalWeights(
S$libcpre_self[grep("republican", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_rep = mean(libcpre_rep_ranks)
# Post-2012 election Republican voters
libcpo_rep_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("republican", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_rep = mean(libcpo_rep_ranks)
lib_diff_rep = calcDiff(libcpre_rep_ranks, libcpo_rep_ranks)
mu_lib_diff_rep = mean(lib_diff_rep)
# Define bins for political standing histograms
bins_standing <- seq(from = min(lib_diff_rep), to = max(lib_diff_rep), by = 1)
hist(lib_diff_rep,
main = "Election Political Standing Shift for Republican Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 15: q4_2
# Pre-2012 election Democratic voters
libcpre_dem_ranks <-compilePoliticalWeights(
S$libcpre_self[grep("democrat", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_dem <- mean(libcpre_dem_ranks)
# Post-2012 election Democratic voters
libcpo_dem_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("democrat", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_dem <- mean(libcpo_dem_ranks)
lib_diff_dem = calcDiff(libcpre_dem_ranks, libcpo_dem_ranks)
mu_lib_diff_dem = mean(lib_diff_dem)
hist(lib_diff_dem,
main = "Election Political Standing Shift for Democratic Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 16: q4_3
rs <- t.test(lib_diff_rep, lib_diff_dem, alternative = "two.sided")
p <- rs$p.value
# Chunk 17: q4_4
(d = calcCohensD(lib_diff_dem, lib_diff_rep))
# Chunk 18: q5_1
summary(S$presapp_job_x)
# Chunk 19: q5_2
presapp_job_x_coast <- compilePoliticalWeights(
S$presapp_job_x[grep(
"New England|atlantic|Pacific", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_coast <- mean(presapp_job_x_coast)
# Define bins for political standing histograms
bins_standing <- seq(from = min(presapp_job_x_coast), to = max(presapp_job_x_coast), by = 1)
# Plot histogram
hist(presapp_job_x_coast, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 20: q5_3
presapp_job_x_flyover <- compilePoliticalWeights(
S$presapp_job_x[grep("central|Mountain", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_flyover <- mean(presapp_job_x_flyover)
# Plot histogram
hist(presapp_job_x_flyover, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 21: q5_4
(rs <- wilcox.test(presapp_job_x_flyover, presapp_job_x_coast, alternative = "greater"))
# Chunk 22: q5_5
n = length(presapp_job_x_flyover) + length(presapp_job_x_coast)
(r = calcEffectSize(rs$p.value, n))
setwd("~/Work/MIDS/w203/labs/lab3")
# Chunk 1: load
S = read.csv("ANES_2012_sel.csv")
# Chunk 2: q1_1
summary(S$libcpre_self)
n = length(S$libcpre_self)
# Chunk 3: q1_2
# Function for generating political weights nulling invalid answers
compilePoliticalWeights <- function(v, offset, skip_null = TRUE) {
if(skip_null) {
v = v[grepl("^(\\d{1})", v)]
}
as.numeric(v)-offset
}
libcpre_ranks <- compilePoliticalWeights(S$libcpre_self, 3)
mu_libcpre <- mean(libcpre_ranks)
# Define bins for political standing histograms
bins_standing <- seq(from = min(libcpre_ranks), to = max(libcpre_ranks), by = 1)
# Plot histogram
hist(libcpre_ranks, main = "Pre-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 4: q1_3
summary(factor(substr(S$libcpo_self, 1, 35)))
# Chunk 5: q1_4
libcpo_ranks <- compilePoliticalWeights(S$libcpo_self, 5)
mu_libcpo = mean(libcpo_ranks)
hist(libcpo_ranks, main = "Post-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 6: q1_5
(rs <- wilcox.test(libcpre_ranks, libcpo_ranks, alternative = "two.sided"))
# Chunk 7: q1_6
calcEffectSize <- function(stat, n) {
r = qnorm(stat)/sqrt(n)
}
n = length(libcpre_ranks)+length(libcpo_ranks)
(r = calcEffectSize(rs$p.value, n))
# Chunk 8: q2_1
# Define bins for voter age histograms
bins_ages <- seq(from = 20, to = 100, by = 10)
bins_ages <- c(18, bins_ages)
# Extract Republican voters
rep_ages <- S$dem_age_r_x[grep("republican", S$pid_x, ignore.case = T)]
rep_ages <- rep_ages[is.numeric(rep_ages) & rep_ages >= 18]
rep_ages_n = length(rep_ages)
rep_age_mean = mean(rep_ages)
hist(rep_ages, main = "Republican Voter Age", xlab = "Age", breaks = bins_ages)
# Extract Democratic voters
dem_ages <- S$dem_age_r_x[grep("democrat", S$pid_x, ignore.case = T)]
dem_ages <- dem_ages[is.numeric(dem_ages) & dem_ages >= 18]
dem_ages_n = length(dem_ages)
dem_age_mean = mean(dem_ages)
hist(dem_ages, main = "Democratic Voter Age", xlab = "Age", breaks = bins_ages)
# Chunk 9: q2_2
rs <- t.test(rep_ages, dem_ages, alternative = "greater")
p <- rs$p.value
# Chunk 10: q2_3
calcPooledSd <- function(v1, v2) {
((length(v1)-1)*sd(v1)^2 + (length(v2)-1)*sd(v2)^2)/(length(v1) + length(v2) - 2)
}
calcCohensD <- function(v1, v2) {
(mean(v1) - mean(v2))/calcPooledSd(v1, v2)
}
(d = calcCohensD(rep_ages, dem_ages))
# Chunk 11: q3_1
rs <- t.test(rep_ages, alternative = "greater", mu = 51)
p <- rs$p.value
# Chunk 12: q3_2
computeEffectSizeCorrelationR <- function(t, df) {
t/sqrt(t^2+df)
}
r = computeEffectSizeCorrelationR(rs$statistic, rep_ages_n-1)
# Chunk 13: q4_1
calcDiff <- function(v1, v2, skip_null = TRUE) {
if(length(v1) != length(v2)) {
FALSE
}
v = c()
for(i in 1:length(v1)) {
if((v1[i] < 1 || v2[i] < 1) && skip_null) {
next
}
v = c(v, v1[i]-v2[i])
}
v
}
# Pre-2012 election Republican voters
libcpre_rep_ranks <- compilePoliticalWeights(
S$libcpre_self[grep("republican", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_rep = mean(libcpre_rep_ranks)
# Post-2012 election Republican voters
libcpo_rep_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("republican", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_rep = mean(libcpo_rep_ranks)
lib_diff_rep = calcDiff(libcpre_rep_ranks, libcpo_rep_ranks)
mu_lib_diff_rep = mean(lib_diff_rep)
# Define bins for political standing histograms
bins_standing <- seq(from = min(lib_diff_rep), to = max(lib_diff_rep), by = 1)
hist(lib_diff_rep,
main = "Election Political Standing Shift for Republican Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 14: q4_2
# Pre-2012 election Democratic voters
libcpre_dem_ranks <-compilePoliticalWeights(
S$libcpre_self[grep("democrat", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_dem <- mean(libcpre_dem_ranks)
# Post-2012 election Democratic voters
libcpo_dem_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("democrat", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_dem <- mean(libcpo_dem_ranks)
lib_diff_dem = calcDiff(libcpre_dem_ranks, libcpo_dem_ranks)
mu_lib_diff_dem = mean(lib_diff_dem)
hist(lib_diff_dem,
main = "Election Political Standing Shift for Democratic Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 15: q4_3
rs <- t.test(lib_diff_rep, lib_diff_dem, alternative = "two.sided")
p <- rs$p.value
# Chunk 16: q4_4
(d = calcCohensD(lib_diff_dem, lib_diff_rep))
# Chunk 17: q5_1
summary(S$presapp_job_x)
# Chunk 18: q5_2
presapp_job_x_coast <- compilePoliticalWeights(
S$presapp_job_x[grep(
"New England|atlantic|Pacific", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_coast <- mean(presapp_job_x_coast)
# Define bins for political standing histograms
bins_standing <- seq(from = min(presapp_job_x_coast), to = max(presapp_job_x_coast), by = 1)
# Plot histogram
hist(presapp_job_x_coast, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 19: q5_3
presapp_job_x_flyover <- compilePoliticalWeights(
S$presapp_job_x[grep("central|Mountain", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_flyover <- mean(presapp_job_x_flyover)
# Plot histogram
hist(presapp_job_x_flyover, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 20: q5_4
(rs <- wilcox.test(presapp_job_x_flyover, presapp_job_x_coast, alternative = "greater"))
# Chunk 21: q5_5
n = length(presapp_job_x_flyover) + length(presapp_job_x_coast)
(r = calcEffectSize(rs$p.value, n))
# Chunk 1: load
S = read.csv("ANES_2012_sel.csv")
# Chunk 2: q1_1
summary(S$libcpre_self)
n = length(S$libcpre_self)
# Chunk 3: q1_2
# Function for generating political weights nulling invalid answers
compilePoliticalWeights <- function(v, offset, skip_null = TRUE) {
if(skip_null) {
v = v[grepl("^(\\d{1})", v)]
}
as.numeric(v)-offset
}
libcpre_ranks <- compilePoliticalWeights(S$libcpre_self, 3)
mu_libcpre <- mean(libcpre_ranks)
# Define bins for political standing histograms
bins_standing <- seq(from = min(libcpre_ranks), to = max(libcpre_ranks), by = 1)
# Plot histogram
hist(libcpre_ranks, main = "Pre-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 4: q1_3
summary(factor(substr(S$libcpo_self, 1, 35)))
# Chunk 5: q1_4
libcpo_ranks <- compilePoliticalWeights(S$libcpo_self, 5)
mu_libcpo = mean(libcpo_ranks)
hist(libcpo_ranks, main = "Post-2012 Election Political Standing",
xlab = "Political Standing", breaks = bins_standing)
# Chunk 6: q1_5
(rs <- wilcox.test(libcpre_ranks, libcpo_ranks, alternative = "two.sided"))
# Chunk 7: q1_6
calcEffectSize <- function(stat, n) {
r = qnorm(stat)/sqrt(n)
}
n = length(libcpre_ranks)+length(libcpo_ranks)
(r = calcEffectSize(rs$p.value, n))
# Chunk 8: q2_1
# Define bins for voter age histograms
bins_ages <- seq(from = 20, to = 100, by = 10)
bins_ages <- c(18, bins_ages)
# Extract Republican voters
rep_ages <- S$dem_age_r_x[grep("republican", S$pid_x, ignore.case = T)]
rep_ages <- rep_ages[is.numeric(rep_ages) & rep_ages >= 18]
rep_ages_n = length(rep_ages)
rep_age_mean = mean(rep_ages)
hist(rep_ages, main = "Republican Voter Age", xlab = "Age", breaks = bins_ages)
# Extract Democratic voters
dem_ages <- S$dem_age_r_x[grep("democrat", S$pid_x, ignore.case = T)]
dem_ages <- dem_ages[is.numeric(dem_ages) & dem_ages >= 18]
dem_ages_n = length(dem_ages)
dem_age_mean = mean(dem_ages)
hist(dem_ages, main = "Democratic Voter Age", xlab = "Age", breaks = bins_ages)
# Chunk 9: q2_2
rs <- t.test(rep_ages, dem_ages, alternative = "greater")
p <- rs$p.value
# Chunk 10: q2_3
calcPooledSd <- function(v1, v2) {
((length(v1)-1)*sd(v1)^2 + (length(v2)-1)*sd(v2)^2)/(length(v1) + length(v2) - 2)
}
calcCohensD <- function(v1, v2) {
(mean(v1) - mean(v2))/calcPooledSd(v1, v2)
}
(d = calcCohensD(rep_ages, dem_ages))
# Chunk 11: q3_1
rs <- t.test(rep_ages, alternative = "two.sided", mu = 51)
p <- rs$p.value
# Chunk 12: q3_2
computeEffectSizeCorrelationR <- function(t, df) {
t/sqrt(t^2+df)
}
r = computeEffectSizeCorrelationR(rs$statistic, rep_ages_n-1)
# Chunk 13: q4_1
calcDiff <- function(v1, v2, skip_null = TRUE) {
if(length(v1) != length(v2)) {
FALSE
}
v = c()
for(i in 1:length(v1)) {
if((v1[i] < 1 || v2[i] < 1) && skip_null) {
next
}
v = c(v, v1[i]-v2[i])
}
v
}
# Pre-2012 election Republican voters
libcpre_rep_ranks <- compilePoliticalWeights(
S$libcpre_self[grep("republican", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_rep = mean(libcpre_rep_ranks)
# Post-2012 election Republican voters
libcpo_rep_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("republican", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_rep = mean(libcpo_rep_ranks)
lib_diff_rep = calcDiff(libcpre_rep_ranks, libcpo_rep_ranks)
mu_lib_diff_rep = mean(lib_diff_rep)
# Define bins for political standing histograms
bins_standing <- seq(from = min(lib_diff_rep), to = max(lib_diff_rep), by = 1)
hist(lib_diff_rep,
main = "Election Political Standing Shift for Republican Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 14: q4_2
# Pre-2012 election Democratic voters
libcpre_dem_ranks <-compilePoliticalWeights(
S$libcpre_self[grep("democrat", S$pid_x, ignore.case = T)], 3, FALSE)
mu_libcpre_dem <- mean(libcpre_dem_ranks)
# Post-2012 election Democratic voters
libcpo_dem_ranks <-compilePoliticalWeights(
S$libcpo_self[grep("democrat", S$pid_x, ignore.case = T)], 5, FALSE)
mu_libcpo_dem <- mean(libcpo_dem_ranks)
lib_diff_dem = calcDiff(libcpre_dem_ranks, libcpo_dem_ranks)
mu_lib_diff_dem = mean(lib_diff_dem)
hist(lib_diff_dem,
main = "Election Political Standing Shift for Democratic Voters",
xlab = "Shift in Political Standing", breaks = bins_standing)
# Chunk 15: q4_3
rs <- t.test(lib_diff_rep, lib_diff_dem, alternative = "two.sided")
p <- rs$p.value
# Chunk 16: q4_4
(d = calcCohensD(lib_diff_dem, lib_diff_rep))
# Chunk 17: q5_1
summary(S$presapp_job_x)
# Chunk 18: q5_2
presapp_job_x_coast <- compilePoliticalWeights(
S$presapp_job_x[grep(
"New England|atlantic|Pacific", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_coast <- mean(presapp_job_x_coast)
# Define bins for political standing histograms
bins_standing <- seq(from = min(presapp_job_x_coast), to = max(presapp_job_x_coast), by = 1)
# Plot histogram
hist(presapp_job_x_coast, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 19: q5_3
presapp_job_x_flyover <- compilePoliticalWeights(
S$presapp_job_x[grep("central|Mountain", S$profile_region9, ignore.case = T)], 2)
mu_presapp_job_x_flyover <- mean(presapp_job_x_flyover)
# Plot histogram
hist(presapp_job_x_flyover, main = "Pre-2012 Election Approval Rating",
xlab = "Approval Rating", breaks = bins_standing)
# Chunk 20: q5_4
(rs <- wilcox.test(presapp_job_x_flyover, presapp_job_x_coast, alternative = "greater"))
# Chunk 21: q5_5
n = length(presapp_job_x_flyover) + length(presapp_job_x_coast)
(r = calcEffectSize(rs$p.value, n))
rs <- t.test(rep_ages, alternative = "two.sided", mu = 51)
p <- rs$p.value
rs <- t.test(rep_ages, alternative = "greater", mu = 51)
p <- rs$p.value
p <- rs$p.value
summary(factor(substr(S$libcpre_self, 1, 15)))
summary(S$presapp_job_x)
approval_rate = length(S$presapp_job_x[grep('Approve', S$presapp_job_x)])/length(S$presapp_job_x)
setwd("~/Work/MIDS/w203/week11")
library(stargazer)
load("GPA1.rdata")
head(data)
plot(jitter(data$ACT), jitter(data$colGPA), xlab = "ACT score", ylab = "College GPA", main = "College GPA versus ACT score")
(model1 = lm(colGPA ~ ACT, data = data))
abline(model1)
abline(model1, lwd=2)
plot(model1$fitted.values, model1$residuals,
main = "Residuals vs Fitted Values for GPA Data",
xlab = "Fitted Values", ylab = "Residuals")
plot(model1$fitted.values, model1$residuals,
main = "Residuals vs Fitted Values for GPA Data",
xlab = "Fitted Values", ylab = "Residuals")
plot(model1, which = 1)
plot(model1, which = 5)
ACT_with_error = data$ACT
ACT_with_error[5] = 80
model1_with_error = lm(data$colGPA ~ ACT_with_error)
plot(model1_with_error, which=5, main = "GPA Data with Error Introduced")
summary(data$hsGPA)
hist(data$hsGPA, breaks = 20)
library(car)
scatterplotMatrix(data[,c("colGPA", "ACT", "hsGPA")], diagonal = "histogram")
(model2 = lm(colGPA ~ ACT + hsGPA, data = data))
plot(model2, which = 1, main = "Model 2 for College GPA")
summary(model1)$r.square
summary(model2)$r.square
AIC(model1)
AIC(model2)
stargazer(model1, model2, type = "latex", report = "vc",
header = FALSE,
title = "Linear Models Predicting College GPA",
keep.stat = c("aic", "rsq", "n"),
omit.table.layout = "n")
install.packages("stargazer")
stargazer(model1, model2, type = "latex", report = "vc",
header = FALSE,
title = "Linear Models Predicting College GPA",
keep.stat = c("aic", "rsq", "n"),
omit.table.layout = "n")
library(stargazer)
stargazer(model1, model2, type = "latex", report = "vc",
header = FALSE,
title = "Linear Models Predicting College GPA",
keep.stat = c("aic", "rsq", "n"),
omit.table.layout = "n")
stargazer(model1, model2)
stargazer(model1, model2, type = "latex", report = "vc",
header = FALSE,
title = "Linear Models Predicting College GPA",
keep.stat = c("aic", "rsq", "n"),
omit.table.layout = "n")
stargazer(model1, model2, type = "text", report = "vc",
header = FALSE,
title = "Linear Models Predicting College GPA",
keep.stat = c("aic", "rsq", "n"),
omit.table.layout = "n")
